# creating a table
# example 1 -- single partition key
CREATE TABLE temperature_by_country (country text, city text, weather_station test, temperature float, time_created timestamp, PRIMARY KEY (country,city, weather_station,time_created));
- primary key is a compound, in the group first column acts as partition key. country is partition key here.
# example 2 -- single partition key
CREATE TABLE temperature_by_country (country text, city text, weather_station test, temperature float, time_created timestamp, PRIMARY KEY (weather_station,country,city,time_created));
- primary key is a compound, in the group first column acts as partition key. weather_station is partition key here.

# example 3 -- compound partition key
CREATE TABLE temperature_by_country (country text, city text, weather_station test, temperature float, time_created timestamp, PRIMARY KEY ((weather_station,country),city,time_created));
- primary key is a compound, in the group first column acts as partition key. weather_station and country is partition key here.

# select query example -- single partition key
- To query data for a column, we need to pass partition key clause as well, as cassandra queries for a partition.

# clustering key
- Within a partition, the clustering key sorts the rows

The partition key decides in which node/parition the record goes. Same way, during query also we should send so read would be efficient.

# sources
https://www.baeldung.com/cassandra-keys

https://www.instaclustr.com/blog/cassandra-data-partitioning/

# Tombstones
This is db cleanup staretgy. If a records= is to be deleted, it is marked as tombstone. And a cron/batch jobs clears the records eventually.
its called compaction. 

# Choosing a correct partition key is important before app development, so to even out data placement across partitions/nodes.


It uses LSM (Log Structured Merge tree) tree as Data strcuture, that is In-Memory. ANd it pushes/flushed the data to SSTable (SOrted String).
LSM has better write throughput. B Tress have better read.

Its leaderless. With many replicas. Ensures High Availability.
With Quorums we can increase COnsistency and reduce Availability. Write quorums + Read Quorums > N then more consistency.

# Its does not have ACID. Could even be data loss or dirty reads.

Main Partitions/Nodes/Leader are over a ring. So request go to same node always. Based on partition key.

# Read repairs