public class heartBeatData {

	@DisplayName("API coverage tests")
	@ParameterizedTest(name = "#{index} [{arguments}]")
	@ArgumentsSource(TypeMethodData.class)
	public void TestApiInvocations(TypeMethodInfo data)
	
Method m = data.Method;
		Type[] p = data.ParamTypes;
		System.out.println("params " + p);

		Class<?> type = data.Type;
		ObjectGenerator objGen = new ObjectGenerator();
		Object[] param=new Object[p.length];

		Object oo=null;
		for (int i=0; i<p.length;i++) {
            System.out.println("params " + p[i]);

            oo=objGen.GetObject( p[i],0,4,false);
            param[i]=oo;

        }
		/*
		 * /invoke method on server
		 */

		try

		{
			m.invoke(type.getDeclaredConstructor().newInstance(),param);
			
Class<?> c = Class.forName("deshaw.moss.service.accountmapper.light.CustodianAccountMappingServiceLight");
Type[] p =tt.getGenericParameterTypes();

			        if( tt.getName().contains("determineCustodianAccount")) {

				for(Parameter a:tt.getParameters()) {
					System.out.println("parameter " + a.getType());
					if(!a.getName().contains("int")) {
						System.out.println("method " + tt);
						Object[] param=new Object[p.length];
			            List<Object> o=new ArrayList<Object>();
			            Object oo=null;

						for (int i=0; i<p.length;i++) {
			                System.out.println("params " + p[i]);
			                //ParameterizedType pt = (ParameterizedType)((Type) p[i]);
			                //System.out.println("params underlying" +   pt.getActualTypeArguments()[0]);
			                //p[i].getClass();

			                oo=objGen.GetObject( p[i],0,4,false);
			                //System.out.println("params object field" + oo.getClass().getDeclaredFields()[0] );
			                System.out.println("params object generated" + oo );
			                param[i]=oo;
			                o.add(oo);

			            }
						System.out.println("params generated" + param);
                        System.out.println("params objects generated  " + o);

						try

				        {
						    tt.invoke(c.getDeclaredConstructor().newInstance(), param);

public class TypeMethodData<T> implements ArgumentsProvider {

    @SuppressWarnings("unchecked")
    @Override
    public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {

        System.out.println("Providing data for Test");

        String packageName = "deshaw";

        String path = packageName.replace('.', '/');
        // Windows JarInputStream jarFile = new JarInputStream(new
        // FileInputStream("H:\\.m2\\repository\\com\\arcesium\\arcesium-client\\1.7.1.RC3\\arcesium-client-1.7.1.RC3.jar"));
        JarInputStream jarFile = new JarInputStream(new FileInputStream(
                "/u/xavier/.m2/repository/com/arcesium/arcesium-client/1.7.1.RC3/arcesium-client-1.7.1.RC3.jar"));
        ArrayList<String> classes = new ArrayList<String>();
        JarEntry jarEntry;
        String name;
        while (true) {
            jarEntry = jarFile.getNextJarEntry();
            if (jarEntry == null) {
                break;
            }
            if (((jarEntry.getName().startsWith(packageName)) || jarEntry.getName().contains("1arcesium"))
                    && (jarEntry.getName().endsWith(".class"))) {
                if (true)

                    name = jarEntry.getName().replaceAll("/", "\\.");

                if (!(name).contains("$")) {
                    System.out.println("Found " + name);
                    classes.add((jarEntry.getName().replaceAll("/", "\\.")));
                }
            }
        }

        Stream.Builder<Arguments> argumentBuilder = Stream.builder();

        for (String _type : classes) {
            if (!(_type.contains("fincad") || _type.contains("api") || (_type.contains("SfsTypeAssociation")))
                    && _type.contains("Light")) {
                System.out.println("create " + _type);

                Class type = Class.forName(_type.replace(".class", ""));
                if (IsServiceType(type)) {
                    for (Method method : type.getMethods()) {

                        if (IsServiceMethod(method) && !IsMethodExcluded(method)) {
                            System.out.println("create methods"+method);
                            argumentBuilder.add(Arguments.of(new TypeMethodInfo(type, method)));
                        }
                    }
                }
            }
        }

        return argumentBuilder.build();
    }
	
	
	
public class TypeMethodInfo implements Serializable {

	/**
	 *
	 */
	private static final long serialVersionUID = 1L;

	ArrayList<String> ignored = new ArrayList<String>();
	// ignored.add("deshaw.moss.fincad.util.FincadUtil");

	public TypeMethodInfo() {
	}

	public TypeMethodInfo(Class<?> type, Method method) {
		Type = type;
		ParamTypes = method.getGenericParameterTypes();
		Method = method;
		if (method.isDefault()) {
			GenericArguments = method.getGenericParameterTypes();
		} else {
			GenericArguments = new Class[] {};
		}
	}

	public Class<?> Type;

	public Type[] ParamTypes;

	public java.lang.reflect.Type[] GenericArguments;

	public Method Method;

	public String toString() {
		return Type.getName() + ':' + Method;
	}


package heartBeat;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import org.apache.commons.lang.RandomStringUtils;

/*
 * * @author kumarh
 */

public class ObjectGenerator {

    final int listLength = 3;
    final static Random Rnd = new Random(1000);

    @SuppressWarnings({ "deprecation", "unchecked" })
    private static Object GenerateObject(Type tType, int depth, int maxDepth, boolean useRef) throws Exception {

        System.out.println(tType);



        if (depth == maxDepth) {

            System.out.println("depth is null");
           if(tType == boolean.class)
               return true;
               //System.out.println(tType);
           else if(tType == int.class)
               return Math.abs(Rnd.nextInt(999999999));
               //System.out.println(tType);
           else
            return null;
        }
        else if (tType.getTypeName().contains("java.lang.Class<T>") || tType.getTypeName().contains("java.lang.Class")){
            return null;
        }
        else if (tType.getTypeName().contains("java.io.File")) {
            return new java.io.File("Heartbeat.class");
        }
        else if (tType.getTypeName().contains("java.util.List<T>")) {
            List<?> lst = new ArrayList<>();
            return lst;
        }
        else if (tType.getTypeName().contains("java.util.Set")) {
            ParameterizedType pt = (ParameterizedType) tType;
            Type innerClass = pt.getActualTypeArguments()[0];
            Set<Object> set = new HashSet<>();
            set.add(GenerateObject(innerClass, depth, maxDepth-1, useRef));
            return set;
        }

        else if (tType.getTypeName().contains("java.util.List") && !tType.getTypeName().contains("java.util.Map") && !tType.getTypeName().contains("java.util.HashMap")) {
            System.out.println("check if List type object  " + tType);
            if (tType instanceof Class<?>) {
                ParameterizedType pt = (ParameterizedType) tType;
            }
            ParameterizedType pt = (ParameterizedType) tType;
            Type innerClass = pt.getActualTypeArguments()[0];
            List<?> lst = GetList(innerClass, depth, maxDepth - 1, useRef);
            return lst;
        }
        else if(tType.getTypeName().contains("java.util.List")) {
            System.out.println("check if List type object  " + tType);
            if (tType instanceof Class<?>) {
                ParameterizedType pt = (ParameterizedType) tType;
            }
            ParameterizedType pt = (ParameterizedType) tType;
            Type innerClass = pt.getActualTypeArguments()[0];
            List<?> lst = GetList(innerClass, depth, maxDepth - 1, useRef);
            return lst;
        }

        else if (tType.getTypeName().contains("java.util.Map") || tType.getTypeName().contains("java.util.HashMap")) {

            ParameterizedType pType = (ParameterizedType) tType;
            System.out.println("VAL"+pType);


            Class<?> keyType = (Class<?>) pType.getActualTypeArguments()[0];


            if(pType.getActualTypeArguments()[0].getTypeName().contains("java.lang.String")) {
                 GenerateObject(pType, depth, maxDepth-1, useRef);
                //Type valType1=((ParameterizedType) pType.getActualTypeArguments()[0]).getActualTypeArguments()[1];
                //Type keyType1=((ParameterizedType) pType.getActualTypeArguments()[0]).getActualTypeArguments()[0];
            }


            Type valType=null ;
            ObjectGenerator obj = new ObjectGenerator();
           //System.out.println("typeeee"+pType.getActualTypeArguments()[1]);
            if(pType.getActualTypeArguments()[1].getTypeName().contains("java.util.Map")){
                Type valType1=((ParameterizedType) pType.getActualTypeArguments()[1]).getActualTypeArguments()[1];
                Type keyType1=((ParameterizedType) pType.getActualTypeArguments()[1]).getActualTypeArguments()[0];

                valType=pType.getActualTypeArguments()[1];
            }
            else if(pType.getActualTypeArguments()[1].getTypeName().contains("java.util.List")){

                valType=pType.getActualTypeArguments()[1];
            }
            else
            {
                valType = (Class<?>) pType.getActualTypeArguments()[1];
            }
            System.out.println("value Type"+pType);
            Map<Object, Object> dict = new HashMap<Object, Object>();

            for (int i = 0; i < 1; ++i) {
                Object key = obj.GetObject(keyType, depth, maxDepth - 1, useRef);
                Object val = obj.GetObject(valType, depth, maxDepth - 1, useRef);
                if (key == null) {
                    return null;
                }
                System.out.println("check Map object  " + key);
                System.out.println("check Map object  " + val);
                dict.put(key, val);

            }
            return dict;
        }
        else if (tType.getTypeName().contains("java.util.Collection")) {
            //System.out.println("sssssssssss");
            ParameterizedType pt = (ParameterizedType) tType;
            Type innerClass = pt.getActualTypeArguments()[0];
            System.out.println(innerClass);
            return GenerateObject(innerClass, depth, maxDepth-1, useRef);
        }

        else if (tType.getTypeName().contains("java.lang.Object")) {

            return null;
        }

        else if(tType.getTypeName().contains("com.arcesium.frames.infra.filter.Filter")|| tType.getTypeName().contains("deshaw.moss.service.aggregation.AggregationConfig") || tType.getTypeName().equalsIgnoreCase("T")) {
            return null;
        }

        else if (((Class<? extends Type>) tType).isEnum()
                || Modifier.toString((tType.getClass()).getModifiers()).contains("Enum")) {
            Object[] vals = ((Class<?>) tType).getEnumConstants();
            //System.out.println("for enums  " + vals);
            if (vals.length == 0) {
                return 0;
            }
            return vals[(Rnd.nextInt(vals.length))];
        }

        else if (((Class<?>) tType).isPrimitive() || tType.getTypeName().toLowerCase().contains("boolean")
                || tType.getTypeName().contains("BigDecimal") || tType.getTypeName().contains("Float")
                || tType.getTypeName().contains("Long") || tType.getTypeName().contains("Double")
                || tType.getTypeName().contains("Integer") || tType.getTypeName().contains("String")
                || tType.getTypeName().contains("Date") || !tType.getTypeName().contains("Ljava.lang.String")) {

            //System.out.println("for primitive types  " + tType);
            return GenerateValueType(tType);
        } else if (Modifier.isAbstract(((Class<?>) tType).getModifiers())
                || Modifier.isInterface(((Class<?>) tType).getModifiers())) {
            // find concrete subtypes
            Class<?> type = (Class<?>) GetConcreteType((Class<?>) tType);
            if (type == null) {
                return null;
            } else {
                tType = type;
            }

        }

        else if (((Class<?>) tType).isArray()) {

            return GetArray(tType, depth, maxDepth);
        }

        else {
            Object[] vals = tType.getClass().getEnumConstants();
            int val = tType.getClass().getModifiers();

            System.out.println("fields types");

            System.out.println("fields types" + Modifier.toString(val));
            int val1 = tType.getClass().getModifiers();
            System.out.println("fields types" + tType.getClass());
            System.out.println("fields types" + Modifier.toString(val));
            Class<?> obj = Class.forName(tType.getTypeName());

            Object ob = obj.getDeclaredConstructor().newInstance();
            // create object and set fields
            Field[] fields = obj.getDeclaredFields();

            for (Field f : fields) {
                //System.out.println("fields types  " + f);
                if(f.toString().contains("myRuleFieldValues"))
                    System.out.println("fields types  " + f);

                if (!(Modifier.toString(f.getModifiers()).contains("final") || f.toString().contains("ttrMap")
                        || f.toString().toLowerCase().contains("log") || f.toString().contains("security.meta")
                        || f.toString().contains("$"))) {
                    f.setAccessible(true);
                    f.set(ob, GenerateObject(f.getGenericType(), depth, maxDepth - 1, false));
                }
            }

            return obj.getDeclaredConstructor().newInstance();
        }
        System.out.println("return null  ");
        return null;

    }

    private static Object GetArray(Type tType, int depth, int maxDepth) {
        Class<?> innerType = ((Class<?>) tType).getComponentType();

        // array.
        return Array.newInstance(innerType, 2);
    }

    private static List GetList(Type tType, int depth, int maxDepth, boolean useRef) throws Exception {

        System.out.println("List types  " + tType);
        List<Object> lst = new ArrayList<>();
        ObjectGenerator obj = new ObjectGenerator();
        if(tType.equals("java.lang.Object") || tType.getTypeName().contains("? extends") || tType.getTypeName().equalsIgnoreCase("S")) {
            lst.add(new Object());
            return lst;
        }
        for (int i = 0; i < 2; ++i) {
            lst.add(obj.GetObject(tType, depth, maxDepth - 1, useRef));
        }
        return lst;
    }

    public Object GetObject(Type p, int depth, int maxDepth, boolean useRef) throws Exception {


        return GenerateObject(p, depth, maxDepth, useRef);
    }

    private static Object GetConcreteType(Class<?> t) throws Exception {
        List<Class<?>> types = TypeMethodData.getClasses();
        for (Class<?> c : types) {
            if (c.isAssignableFrom(t))
                return GenerateObject(c, 1, 4, false);
        }
        System.out.println("null type");
        return null;
    }

    private static Object GenerateValueType(Type t) throws Exception {

        if (t.getTypeName().contains("java.lang.Byte") || t == byte.class) {
            return (byte) Rnd.nextLong();

        } else if (t.getTypeName().toLowerCase().contains("boolean") || t == boolean.class) {

            return Rnd.nextLong() == 0 ? false : true;

        }

        else if (t.getTypeName().contains("Date")) {
            long offset = Timestamp.valueOf("2012-01-01 00:00:00").getTime();
            long end = Timestamp.valueOf("2013-01-01 00:00:00").getTime();
            long diff = end - offset + 1;
            Timestamp rand = new Timestamp(offset + (long) (Math.random() * diff));
            return (Date) rand;
        } else if (t.getTypeName().contains("java.lang.String")) {
            return GetRandomUnicodeString(Rnd.nextInt(), Rnd.nextInt());
        } else if (t.getTypeName().contains("java.lang.Integer") || t == int.class) {
            return Math.abs(Rnd.nextInt(999999999));
        } else if (t == float.class || t.getTypeName().contains("java.lang.Float")) {
            return (float) Rnd.nextInt(999999999);
        }

        else if (t == double.class || t.getTypeName().contains("Double")) {
            Rnd.nextLong();
            return Math.abs((double) Rnd.nextLong());
        } else if (t == long.class || t.getTypeName().contains("Long")) {
            Rnd.nextLong();
            return Math.abs(Rnd.nextLong());
        } else if (t.getTypeName().contains("BigDecimal")) {
            return new BigDecimal((float) Rnd.nextInt(999999999));
        } else if (t.getClass().isEnum()) {
            Object[] vals = t.getClass().getEnumConstants();
            if (vals.length == 0) {
                return 0;
            }
            return vals[(Rnd.nextInt(vals.length))];
        } else {
            return null;
            //throw new Exception("type is not found");
        }
    }

    public static String GetRandomUnicodeString(int length, int maxValue) {

        String sample = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        boolean useLetters = true;
        boolean useNumbers = false;
        String generatedString = RandomStringUtils.random(10, useLetters, useNumbers);

        return generatedString;
    }

    public static double NextDouble() {
        return Rnd.nextDouble();
    }

}